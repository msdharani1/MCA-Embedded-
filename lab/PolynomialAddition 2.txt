#include <stdio.h>
#include <stdlib.h>

// Define a structure for a term in a polynomial
struct Term {
    int coefficient;
    int exponent;
    struct Term *next;
};

// Function prototypes
struct Term *createTerm(int coefficient, int exponent);
void insertTerm(struct Term **poly, int coefficient, int exponent);
void displayPolynomial(struct Term *poly);
struct Term *addPolynomials(struct Term *poly1, struct Term *poly2);

int main() {
    struct Term *poly1 = NULL, *poly2 = NULL, *result = NULL;
    int n1, n2, coeff, exp;

    // Input for the first polynomial
    printf("Enter the number of terms in the first polynomial: ");
    scanf("%d", &n1);

    for (int i = 0; i < n1; ++i) {
        printf("Enter coefficient and exponent for term %d: ", i + 1);
        scanf("%d %d", &coeff, &exp);
        insertTerm(&poly1, coeff, exp);
    }

    // Input for the second polynomial
    printf("\nEnter the number of terms in the second polynomial: ");
    scanf("%d", &n2);

    for (int i = 0; i < n2; ++i) {
        printf("Enter coefficient and exponent for term %d: ", i + 1);
        scanf("%d %d", &coeff, &exp);
        insertTerm(&poly2, coeff, exp);
    }

    // Add the polynomials
    result = addPolynomials(poly1, poly2);

    // Display the result
    printf("\nResultant Polynomial: ");
    displayPolynomial(result);

    return 0;
}

// Function to create a term in a polynomial
struct Term *createTerm(int coefficient, int exponent) {
    struct Term *newTerm = (struct Term *)malloc(sizeof(struct Term));
    newTerm->coefficient = coefficient;
    newTerm->exponent = exponent;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term into a polynomial
void insertTerm(struct Term **poly, int coefficient, int exponent) {
    struct Term *newTerm = createTerm(coefficient, exponent);

    if (*poly == NULL) {
        *poly = newTerm;
    } else {
        struct Term *temp = *poly;

        while (temp->next != NULL) {
            temp = temp->next;
        }

        temp->next = newTerm;
    }
}

// Function to display a polynomial
void displayPolynomial(struct Term *poly) {
    while (poly != NULL) {
        printf("%dx^%d ", poly->coefficient, poly->exponent);
        if (poly->next != NULL) {
            printf("+ ");
        }
        poly = poly->next;
    }
    printf("\n");
}

// Function to add two polynomials
struct Term *addPolynomials(struct Term *poly1, struct Term *poly2) {
    struct Term *result = NULL;

    while (poly1 != NULL || poly2 != NULL) {
        int coeff1 = (poly1 != NULL) ? poly1->coefficient : 0;
        int exp1 = (poly1 != NULL) ? poly1->exponent : 0;

        int coeff2 = (poly2 != NULL) ? poly2->coefficient : 0;
        int exp2 = (poly2 != NULL) ? poly2->exponent : 0;

        int sum_coeff = coeff1 + coeff2;
        int sum_exp = exp1; // Assuming both polynomials have the same exponents

        insertTerm(&result, sum_coeff, sum_exp);

        if (poly1 != NULL) {
            poly1 = poly1->next;
        }

        if (poly2 != NULL) {
            poly2 = poly2->next;
        }
    }

    return result;
}
